# -*- coding: utf-8 -*-
"""admin_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpNnHh83SjyYtUAfi8E8J6MLOS89xdTf
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

def show_admin_dashboard(data):
    students = data['students']
    teachers = data['teachers']
    parents = data['parents']
    sections = data['sections']
    activity = data['activity']
    milestones = data['milestones']
    resources = data['resources']
    notifications = data['notifications']
    parent_teacher_msgs = data['parent_teacher_msgs']
    journals = data['journals']
    interventions = data['interventions']

    st.header("🛠️ Admin Dashboard")

    # --- User Management ---
    st.subheader("👤 User Management")
    user_counts = {
        "Students": students.shape[0],
        "Teachers": teachers.shape[0],
        "Parents": parents.shape[0],
        "Sections": sections.shape[0]
    }
    st.write("**User Counts:**", user_counts)
    st.dataframe(students[['student_id', 'name', 'grade', 'section', 'assigned_teacher_id', 'parent_id']].head(10), height=120)
    st.dataframe(teachers[['teacher_id', 'name', 'assigned_sections', 'email']].head(5), height=80)
    st.dataframe(parents[['parent_id', 'name', 'child_student_id']].head(5), height=80)

    st.divider()

    # --- Platform Analytics ---
    st.subheader("📈 Platform Analytics")
    # Logins and activity trend
    activity['date'] = pd.to_datetime(activity['timestamp']).dt.date
    login_trend = activity[activity['activity'] == 'login'].groupby('date').size().reset_index(name='logins')
    fig = px.line(login_trend, x='date', y='logins', title="Daily Logins")
    st.plotly_chart(fig, use_container_width=True)
    # Top activities
    top_activities = activity['activity'].value_counts()
    st.bar_chart(top_activities)

    st.divider()

    # --- Data Security & Audit (Simulated) ---
    st.subheader("🔒 Data Security & Audit")
    st.info("All admin actions are logged. Recent activity shown below (simulated).")
    recent_admin_actions = activity[activity['role'] == 'admin'] if 'admin' in activity['role'].unique() else pd.DataFrame()
    if not recent_admin_actions.empty:
        st.dataframe(recent_admin_actions.sort_values('timestamp', ascending=False).head(5), height=80)
    else:
        st.write("No recent admin actions.")

    st.divider()

    # --- Content Management (Simulated) ---
    st.subheader("📚 Content Management")
    st.dataframe(resources[['resource_id', 'resource_type', 'subject', 'usage_time_minutes', 'access_date']].head(8), height=80)
    st.info("Add/Remove/Update options available in production.")

    st.divider()

    # --- Role & Access Management (Simulated) ---
    st.subheader("🗂️ Role & Access Management")
    st.write("**Roles:** Student, Teacher, Parent, Principal/HoD, Admin")
    st.write("Permissions are pre-configured in the platform.")
    st.table(pd.DataFrame({
        'Role': ['Student', 'Teacher', 'Parent', 'Principal/HoD', 'Admin'],
        'Dashboard Access': ['✔', '✔', '✔', '✔', '✔'],
        'Edit User Data': ['-', 'Students Only', '-', '-', 'All'],
        'View Analytics': ['Own', 'Class', 'Child', 'School', 'All'],
    }))

    st.divider()

    # --- Integration Status (Simulated) ---
    st.subheader("🔗 Integration Status")
    integrations = pd.DataFrame([
        {'System': 'LMS', 'Status': 'Connected', 'Last Sync': '2025-05-25'},
        {'System': 'SIS', 'Status': 'Connected', 'Last Sync': '2025-05-25'},
        {'System': 'Parent Portal', 'Status': 'Connected', 'Last Sync': '2025-05-25'},
        {'System': 'Analytics Engine', 'Status': 'Connected', 'Last Sync': '2025-05-25'},
    ])
    st.dataframe(integrations, height=80)

    st.divider()

    # --- Custom Report Builder ---
    st.subheader("📝 Custom Report Builder")
    st.download_button("Download Students Data", data=students.to_csv(index=False), file_name="students.csv")
    st.download_button("Download Teachers Data", data=teachers.to_csv(index=False), file_name="teachers.csv")
    st.download_button("Download Activity Log", data=activity.to_csv(index=False), file_name="activity_logs.csv")

    st.divider()

    # --- System Health ---
    st.subheader("💡 System Health & Performance")
    uptime = "99.99%"
    error_logs = 0  # For simulation, zero errors
    st.write(f"**System Uptime:** {uptime}")
    st.write(f"**Open Error Logs:** {error_logs}")

    st.divider()

    # --- Announcements & Broadcasts (Simulated) ---
    st.subheader("📢 Announcements & Broadcasts")
    st.dataframe(notifications[['notif_id', 'date', 'audience', 'notif_type', 'content']].sort_values('date', ascending=False).head(5), height=80)
    st.info("Broadcast new announcements in the live environment.")

    st.divider()

    # --- Feedback & Support ---
    st.subheader("💬 Feedback & Support")
    parent_feedback = parent_teacher_msgs[parent_teacher_msgs['sender'] == 'parent']['message'].head(3).tolist()
    teacher_feedback = interventions['note'].head(3).tolist()
    student_feedback = journals['entry'].head(3).tolist() if not journals.empty else []
    st.markdown("**Sample Parent Feedback:**")
    for msg in parent_feedback:
        st.write(f"- {msg}")
    st.markdown("**Sample Teacher Feedback:**")
    for msg in teacher_feedback:
        st.write(f"- {msg}")
    st.markdown("**Sample Student Journal Feedback:**")
    for msg in student_feedback:
        st.write(f"- {msg}")
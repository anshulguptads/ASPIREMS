# -*- coding: utf-8 -*-
"""principal_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpNnHh83SjyYtUAfi8E8J6MLOS89xdTf
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

def show_principal_dashboard(data):
    students = data['students']
    sections = data['sections']
    teachers = data['teachers']
    skills = data['skills']
    tasks = data['tasks']
    assessments = data['assessments']
    milestones = data['milestones']
    interventions = data['interventions']
    activity = data['activity']
    parent_teacher_msgs = data['parent_teacher_msgs']
    notifications = data['notifications']

    st.header("🏫 Principal / HoD Dashboard")

    # --- Key School Analytics ---
    st.subheader("📊 School / Cohort Analytics")
    total_students = students.shape[0]
    avg_score = students['performance'].apply(lambda x: np.mean(list(eval(x).values()))).mean()
    at_risk_count = students[students['risk_flag'] == 'At Risk'].shape[0]
    engagement = activity[activity['role'] == 'student']['user_id'].nunique() / total_students * 100

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Students", total_students)
    col2.metric("Avg. Score", f"{avg_score:.1f}")
    col3.metric("At-Risk Students", at_risk_count)
    col4.metric("Engagement %", f"{engagement:.1f}")

    # Most common aspirations
    all_aspirations = sum(students['aspiration'].apply(eval).tolist(), [])
    top_asp = pd.Series(all_aspirations).value_counts().head(3)
    st.markdown(f"**Top Aspirations:** {', '.join(top_asp.index)}")

    st.divider()

    # --- Section Analytics ---
    st.subheader("📋 Section Analytics")
    st.dataframe(sections[['section', 'avg_score', 'students_count', 'at_risk_students', 'top_aspirations']], height=180)
    fig = px.bar(sections, x='section', y='avg_score', title="Avg. Score by Section")
    st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # --- At-Risk Student List ---
    st.subheader("🚩 At-Risk Students")
    risk_students = students[students['risk_flag'] == 'At Risk']
    st.dataframe(risk_students[['student_id', 'name', 'grade', 'section', 'progress', 'psychometric_score', 'assigned_teacher_id']], height=180)
    # Distribution by section
    risk_by_section = risk_students.groupby('section').size().reset_index(name='at_risk_count')
    fig = px.bar(risk_by_section, x='section', y='at_risk_count', title="At-Risk Students by Section")
    st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # --- Teacher Effectiveness ---
    st.subheader("👩‍🏫 Teacher Effectiveness")
    # Effectiveness: avg. score improvement of their students (simplified)
    teacher_effect = []
    for teacher_id in teachers['teacher_id']:
        t_students = students[students['assigned_teacher_id'] == teacher_id]
        if t_students.empty:
            continue
        t_assess = assessments[assessments['student_id'].isin(t_students['student_id'])]
        if t_assess.empty:
            continue
        avg_score = t_assess.groupby('student_id')['score'].mean().mean()
        interventions_count = interventions[interventions['teacher_id'] == teacher_id].shape[0]
        teacher_effect.append({'teacher_id': teacher_id, 'name': teachers[teachers['teacher_id'] == teacher_id]['name'].values[0],
                              'avg_score': avg_score, 'interventions': interventions_count})
    teacher_effect_df = pd.DataFrame(teacher_effect)
    if not teacher_effect_df.empty:
        st.dataframe(teacher_effect_df.sort_values('avg_score', ascending=False).head(10), height=120)

    st.divider()

    # --- Usage Statistics ---
    st.subheader("📈 Platform Usage Statistics")
    # Activity by ro
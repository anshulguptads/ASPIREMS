# -*- coding: utf-8 -*-
"""parent_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpNnHh83SjyYtUAfi8E8J6MLOS89xdTf
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

def show_parent_dashboard(parent_id, data):
    parents = data['parents']
    students = data['students']
    tasks = data['tasks']
    assessments = data['assessments']
    resources = data['resources']
    milestones = data['milestones']
    mentor_chats = data['mentor_chats']
    notifications = data['notifications']
    interventions = data['interventions']
    parent_teacher_msgs = data['parent_teacher_msgs']
    journals = data['journals']

    parent = parents[parents['parent_id'] == parent_id].iloc[0]
    student_id = parent['child_student_id']
    student = students[students['student_id'] == student_id].iloc[0]

    st.header(f"👪 Parent Dashboard: {parent['name']}")
    st.markdown(f"**Child:** {student['name']} (Grade {student['grade']}, Section {student['section']})")
    st.markdown(f"**Aspirations:** {', '.join(eval(student['aspiration']))}")
    st.markdown(f"**Progress:** {student['progress']*100:.1f}%")
    st.markdown(f"**Risk:** `{student['risk_flag']}`")
    st.divider()

    # --- Child's Current Learning Path (Tasks) ---
    st.subheader("📚 Child's Learning Path & Task Status")
    my_tasks = tasks[tasks['student_id'] == student_id]
    st.dataframe(my_tasks[['subject', 'status', 'assigned_date', 'due_date', 'completed_date']].sort_values('due_date'), height=150)
    task_counts = my_tasks['status'].value_counts()
    st.bar_chart(task_counts)

    st.divider()

    # --- Assessment Results ---
    st.subheader("📝 Assessment Results")
    my_assessments = assessments[assessments['student_id'] == student_id].sort_values('date')
    st.dataframe(my_assessments[['subject', 'score', 'date', 'feedback']], height=150)
    fig = px.line(my_assessments, x='date', y='score', color='subject', markers=True, title="Assessment Scores Over Time")
    st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # --- Resource Usage ---
    st.subheader("📂 Resource Usage by Child")
    my_resources = resources[resources['student_id'] == student_id]
    if not my_resources.empty:
        usage_by_type = my_resources['resource_type'].value_counts()
        fig = px.pie(values=usage_by_type, names=usage_by_type.index, title="Resource Usage by Type")
        st.plotly_chart(fig, use_container_width=True)
        st.dataframe(my_resources[['resource_type', 'subject', 'usage_time_minutes', 'access_date']], height=120)
    else:
        st.info("No resources accessed yet.")

    st.divider()

    # --- Achievements & Milestones ---
    st.subheader("🏅 Achievements & Milestones")
    my_milestones = milestones[milestones['student_id'] == student_id]
    st.dataframe(my_milestones[['badge', 'date_awarded']].sort_values('date_awarded', ascending=False), height=100)
    st.bar_chart(my_milestones['badge'].value_counts())

    st.divider()

    # --- Mentor & Teacher Insights ---
    st.subheader("🤖 Mentor & Teacher Insights")
    # Mentor Chat Summary
    my_chats = mentor_chats[mentor_chats['student_id'] == student_id].sort_values('date', ascending=False)
    unresolved = my_chats[my_chats['resolved'] == False].shape[0]
    st.info(f"{unresolved} unresolved mentor queries from your child.")
    st.dataframe(my_chats[['date', 'topic', 'summary', 'resolved']], height=80)
    # Teacher feedback (last 2 notes)
    my_teacher_notes = interventions[interventions['student_id'] == student_id].sort_values('date', ascending=False).head(2)
    st.markdown("**Recent Teacher Notes:**")
    for idx, row in my_teacher_notes.iterrows():
        st.write(f"- *{row['date']}:* {row['note']}")

    st.divider()

    # --- Notifications ---
    st.subheader("🔔 Notifications & Alerts")
    my_notifications = notifications[(notifications['student_id'] == student_id) & (notifications['audience'] == 'parent')].sort_values('date', ascending=False)
    st.dataframe(my_notifications[['date', 'notif_type', 'content']], height=100)

    st.divider()

    # --- Parent-Teacher Communication Center ---
    st.subheader("📬 Communication with Teacher")
    my_msgs = parent_teacher_msgs[(parent_teacher_msgs['parent_id'] == parent_id)].sort_values('date', ascending=False).head(8)
    for idx, row in my_msgs.iterrows():
        sender = "You" if row['sender'] == 'parent' else "Teacher"
        st.markdown(f"**{row['date']} | {sender}:** {row['message']}")

    st.divider()

    # --- Reflection & Journal (Read-Only) ---
    st.subheader("📝 Child's Reflection & Journal")
    my_journals = journals[journals['student_id'] == student_id].sort_values('date', ascending=False)
    if not my_journals.empty:
        st.dataframe(my_journals[['date', 'entry']], height=80)
    else:
        st.info("No journal entries from your child yet.")

    # --- Download Child Data ---
    st.divider()
    st.download_button("Download My Child's Data",
                      data=students[students['student_id'] == student_id].to_csv(index=False),
                      file_name=f"{student_id}_parent_view.csv")